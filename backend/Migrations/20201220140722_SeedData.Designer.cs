// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace backend.Migrations
{
    [DbContext(typeof(SalesContext))]
    [Migration("20201220140722_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Domain.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address = "Customer Address 1",
                            FirstName = "John 1",
                            LastName = "Doe 1",
                            Phone = "543211",
                            StartDate = new DateTimeOffset(new DateTime(2020, 11, 30, 9, 7, 22, 364, DateTimeKind.Unspecified).AddTicks(8546), new TimeSpan(0, -5, 0, 0, 0))
                        },
                        new
                        {
                            CustomerId = 2,
                            Address = "Customer Address 2",
                            FirstName = "John 2",
                            LastName = "Doe 2",
                            Phone = "543212",
                            StartDate = new DateTimeOffset(new DateTime(2020, 11, 10, 9, 7, 22, 364, DateTimeKind.Unspecified).AddTicks(8912), new TimeSpan(0, -5, 0, 0, 0))
                        },
                        new
                        {
                            CustomerId = 3,
                            Address = "Customer Address 3",
                            FirstName = "John 3",
                            LastName = "Doe 3",
                            Phone = "543213",
                            StartDate = new DateTimeOffset(new DateTime(2020, 10, 21, 9, 7, 22, 364, DateTimeKind.Unspecified).AddTicks(8934), new TimeSpan(0, -5, 0, 0, 0))
                        },
                        new
                        {
                            CustomerId = 4,
                            Address = "Customer Address 4",
                            FirstName = "John 4",
                            LastName = "Doe 4",
                            Phone = "543214",
                            StartDate = new DateTimeOffset(new DateTime(2020, 10, 1, 9, 7, 22, 364, DateTimeKind.Unspecified).AddTicks(8941), new TimeSpan(0, -5, 0, 0, 0))
                        },
                        new
                        {
                            CustomerId = 5,
                            Address = "Customer Address 5",
                            FirstName = "John 5",
                            LastName = "Doe 5",
                            Phone = "543215",
                            StartDate = new DateTimeOffset(new DateTime(2020, 9, 11, 9, 7, 22, 364, DateTimeKind.Unspecified).AddTicks(8948), new TimeSpan(0, -5, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.Models.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTimeOffset>("BeginDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("DiscountPercentage")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("DiscountId");

                    b.HasIndex("ProductId");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            DiscountId = 1,
                            BeginDate = new DateTimeOffset(new DateTime(2020, 12, 10, 9, 7, 22, 365, DateTimeKind.Unspecified).AddTicks(3351), new TimeSpan(0, -5, 0, 0, 0)),
                            DiscountPercentage = 15.00m,
                            ProductId = 1
                        },
                        new
                        {
                            DiscountId = 2,
                            BeginDate = new DateTimeOffset(new DateTime(2020, 12, 10, 9, 7, 22, 365, DateTimeKind.Unspecified).AddTicks(3925), new TimeSpan(0, -5, 0, 0, 0)),
                            DiscountPercentage = 15.00m,
                            ProductId = 2
                        },
                        new
                        {
                            DiscountId = 3,
                            BeginDate = new DateTimeOffset(new DateTime(2020, 12, 10, 9, 7, 22, 365, DateTimeKind.Unspecified).AddTicks(3942), new TimeSpan(0, -5, 0, 0, 0)),
                            DiscountPercentage = 15.00m,
                            ProductId = 3
                        },
                        new
                        {
                            DiscountId = 4,
                            BeginDate = new DateTimeOffset(new DateTime(2020, 12, 10, 9, 7, 22, 365, DateTimeKind.Unspecified).AddTicks(3947), new TimeSpan(0, -5, 0, 0, 0)),
                            DiscountPercentage = 15.00m,
                            ProductId = 4
                        },
                        new
                        {
                            DiscountId = 5,
                            BeginDate = new DateTimeOffset(new DateTime(2020, 12, 10, 9, 7, 22, 365, DateTimeKind.Unspecified).AddTicks(3951), new TimeSpan(0, -5, 0, 0, 0)),
                            DiscountPercentage = 15.00m,
                            ProductId = 5
                        },
                        new
                        {
                            DiscountId = 6,
                            BeginDate = new DateTimeOffset(new DateTime(2020, 12, 10, 9, 7, 22, 365, DateTimeKind.Unspecified).AddTicks(3957), new TimeSpan(0, -5, 0, 0, 0)),
                            DiscountPercentage = 15.00m,
                            ProductId = 6
                        },
                        new
                        {
                            DiscountId = 7,
                            BeginDate = new DateTimeOffset(new DateTime(2020, 12, 10, 9, 7, 22, 365, DateTimeKind.Unspecified).AddTicks(3961), new TimeSpan(0, -5, 0, 0, 0)),
                            DiscountPercentage = 15.00m,
                            ProductId = 7
                        },
                        new
                        {
                            DiscountId = 8,
                            BeginDate = new DateTimeOffset(new DateTime(2020, 12, 10, 9, 7, 22, 365, DateTimeKind.Unspecified).AddTicks(3965), new TimeSpan(0, -5, 0, 0, 0)),
                            DiscountPercentage = 15.00m,
                            ProductId = 8
                        },
                        new
                        {
                            DiscountId = 9,
                            BeginDate = new DateTimeOffset(new DateTime(2020, 12, 10, 9, 7, 22, 365, DateTimeKind.Unspecified).AddTicks(3969), new TimeSpan(0, -5, 0, 0, 0)),
                            DiscountPercentage = 15.00m,
                            ProductId = 9
                        },
                        new
                        {
                            DiscountId = 10,
                            BeginDate = new DateTimeOffset(new DateTime(2020, 12, 10, 9, 7, 22, 365, DateTimeKind.Unspecified).AddTicks(3973), new TimeSpan(0, -5, 0, 0, 0)),
                            DiscountPercentage = 15.00m,
                            ProductId = 10
                        });
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("CommissionPercentage")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PurchasePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuantityOnHand")
                        .HasColumnType("int");

                    b.Property<decimal>("SalePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Style")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CommissionPercentage = 2.00m,
                            Manufacturer = "Manufacturer 1",
                            Name = "Bike 1",
                            PurchasePrice = 100.00m,
                            QuantityOnHand = 10,
                            SalePrice = 120.00m,
                            Style = "Style 1"
                        },
                        new
                        {
                            ProductId = 2,
                            CommissionPercentage = 4.00m,
                            Manufacturer = "Manufacturer 2",
                            Name = "Bike 2",
                            PurchasePrice = 200.00m,
                            QuantityOnHand = 10,
                            SalePrice = 240.00m,
                            Style = "Style 2"
                        },
                        new
                        {
                            ProductId = 3,
                            CommissionPercentage = 6.00m,
                            Manufacturer = "Manufacturer 3",
                            Name = "Bike 3",
                            PurchasePrice = 300.00m,
                            QuantityOnHand = 10,
                            SalePrice = 360.00m,
                            Style = "Style 3"
                        },
                        new
                        {
                            ProductId = 4,
                            CommissionPercentage = 8.00m,
                            Manufacturer = "Manufacturer 4",
                            Name = "Bike 4",
                            PurchasePrice = 400.00m,
                            QuantityOnHand = 10,
                            SalePrice = 480.00m,
                            Style = "Style 4"
                        },
                        new
                        {
                            ProductId = 5,
                            CommissionPercentage = 10.00m,
                            Manufacturer = "Manufacturer 5",
                            Name = "Bike 5",
                            PurchasePrice = 500.00m,
                            QuantityOnHand = 10,
                            SalePrice = 600.00m,
                            Style = "Style 5"
                        },
                        new
                        {
                            ProductId = 6,
                            CommissionPercentage = 12.00m,
                            Manufacturer = "Manufacturer 6",
                            Name = "Bike 6",
                            PurchasePrice = 600.00m,
                            QuantityOnHand = 10,
                            SalePrice = 720.00m,
                            Style = "Style 6"
                        },
                        new
                        {
                            ProductId = 7,
                            CommissionPercentage = 14.00m,
                            Manufacturer = "Manufacturer 7",
                            Name = "Bike 7",
                            PurchasePrice = 700.00m,
                            QuantityOnHand = 10,
                            SalePrice = 840.00m,
                            Style = "Style 7"
                        },
                        new
                        {
                            ProductId = 8,
                            CommissionPercentage = 16.00m,
                            Manufacturer = "Manufacturer 8",
                            Name = "Bike 8",
                            PurchasePrice = 800.00m,
                            QuantityOnHand = 10,
                            SalePrice = 960.00m,
                            Style = "Style 8"
                        },
                        new
                        {
                            ProductId = 9,
                            CommissionPercentage = 18.00m,
                            Manufacturer = "Manufacturer 9",
                            Name = "Bike 9",
                            PurchasePrice = 900.00m,
                            QuantityOnHand = 10,
                            SalePrice = 1080.00m,
                            Style = "Style 9"
                        },
                        new
                        {
                            ProductId = 10,
                            CommissionPercentage = 20.00m,
                            Manufacturer = "Manufacturer 10",
                            Name = "Bike 10",
                            PurchasePrice = 1000.00m,
                            QuantityOnHand = 10,
                            SalePrice = 1200.00m,
                            Style = "Style 10"
                        });
                });

            modelBuilder.Entity("Domain.Models.Sale", b =>
                {
                    b.Property<int>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("SalesDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("SalespersonId")
                        .HasColumnType("int");

                    b.HasKey("SaleId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalespersonId");

                    b.ToTable("Sales");

                    b.HasData(
                        new
                        {
                            SaleId = 1,
                            CustomerId = 1,
                            ProductId = 3,
                            SalesDate = new DateTimeOffset(new DateTime(2020, 12, 10, 9, 7, 22, 365, DateTimeKind.Unspecified).AddTicks(9841), new TimeSpan(0, -5, 0, 0, 0)),
                            SalespersonId = 1
                        },
                        new
                        {
                            SaleId = 2,
                            CustomerId = 2,
                            ProductId = 4,
                            SalesDate = new DateTimeOffset(new DateTime(2020, 12, 15, 9, 7, 22, 366, DateTimeKind.Unspecified).AddTicks(387), new TimeSpan(0, -5, 0, 0, 0)),
                            SalespersonId = 2
                        },
                        new
                        {
                            SaleId = 3,
                            CustomerId = 3,
                            ProductId = 5,
                            SalesDate = new DateTimeOffset(new DateTime(2020, 12, 5, 9, 7, 22, 366, DateTimeKind.Unspecified).AddTicks(406), new TimeSpan(0, -5, 0, 0, 0)),
                            SalespersonId = 2
                        },
                        new
                        {
                            SaleId = 4,
                            CustomerId = 4,
                            ProductId = 6,
                            SalesDate = new DateTimeOffset(new DateTime(2020, 12, 12, 9, 7, 22, 366, DateTimeKind.Unspecified).AddTicks(413), new TimeSpan(0, -5, 0, 0, 0)),
                            SalespersonId = 2
                        });
                });

            modelBuilder.Entity("Domain.Models.Salesperson", b =>
                {
                    b.Property<int>("SalespersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Manager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("TerminationDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("SalespersonId");

                    b.HasIndex("FirstName", "LastName")
                        .IsUnique();

                    b.ToTable("Salespeople");

                    b.HasData(
                        new
                        {
                            SalespersonId = 1,
                            Address = "Salesperson Address 1",
                            FirstName = "Mike 1",
                            LastName = "Salesperson 1",
                            Manager = "Manager",
                            Phone = "123451",
                            StartDate = new DateTimeOffset(new DateTime(2020, 11, 5, 9, 7, 22, 361, DateTimeKind.Unspecified).AddTicks(7395), new TimeSpan(0, -5, 0, 0, 0))
                        },
                        new
                        {
                            SalespersonId = 2,
                            Address = "Salesperson Address 2",
                            FirstName = "Mike 2",
                            LastName = "Salesperson 2",
                            Manager = "Manager",
                            Phone = "123452",
                            StartDate = new DateTimeOffset(new DateTime(2020, 9, 21, 9, 7, 22, 364, DateTimeKind.Unspecified).AddTicks(736), new TimeSpan(0, -5, 0, 0, 0))
                        },
                        new
                        {
                            SalespersonId = 3,
                            Address = "Salesperson Address 3",
                            FirstName = "Mike 3",
                            LastName = "Salesperson 3",
                            Manager = "Manager",
                            Phone = "123453",
                            StartDate = new DateTimeOffset(new DateTime(2020, 8, 7, 9, 7, 22, 364, DateTimeKind.Unspecified).AddTicks(814), new TimeSpan(0, -5, 0, 0, 0))
                        },
                        new
                        {
                            SalespersonId = 4,
                            Address = "Salesperson Address 4",
                            FirstName = "Mike 4",
                            LastName = "Salesperson 4",
                            Manager = "Manager",
                            Phone = "123454",
                            StartDate = new DateTimeOffset(new DateTime(2020, 6, 23, 9, 7, 22, 364, DateTimeKind.Unspecified).AddTicks(826), new TimeSpan(0, -5, 0, 0, 0))
                        },
                        new
                        {
                            SalespersonId = 5,
                            Address = "Salesperson Address 5",
                            FirstName = "Mike 5",
                            LastName = "Salesperson 5",
                            Manager = "Manager",
                            Phone = "123455",
                            StartDate = new DateTimeOffset(new DateTime(2020, 5, 9, 9, 7, 22, 364, DateTimeKind.Unspecified).AddTicks(835), new TimeSpan(0, -5, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.Models.Discount", b =>
                {
                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Models.Sale", b =>
                {
                    b.HasOne("Domain.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Salesperson", "Salesperson")
                        .WithMany()
                        .HasForeignKey("SalespersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("Salesperson");
                });
#pragma warning restore 612, 618
        }
    }
}
